name: Complete Setup and Deploy
on:
  workflow_dispatch:
jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Create directories
        run: |
          mkdir -p components/delivery
          mkdir -p app/api/generate-pdf
      
      - name: Create all delivery components
        run: |
          cat > components/delivery/index.tsx << 'ENDFILE'
          export { PDFGenerator } from './pdf-generator'
          export { WhatsAppShare } from './whatsapp-share'
          export { EmailShare } from './email-share'
          export { DownloadButton } from './download-button'
          export { PrintButton } from './print-button'
          export { ShareButton } from './share-button'
          ENDFILE
          cat > components/delivery/pdf-generator.tsx << 'ENDFILE'
          'use client'
          import { useState } from 'react'
          import { Button } from '@/components/ui/button'
          import { FileDown, Loader2 } from 'lucide-react'
          interface PDFGeneratorProps { horoscope: any; onGenerate?: (pdfUrl: string) => void }
          export function PDFGenerator({ horoscope, onGenerate }: PDFGeneratorProps) {
            const [isGenerating, setIsGenerating] = useState(false)
            const generatePDF = async () => {
              setIsGenerating(true)
              try {
                const response = await fetch('/api/generate-pdf', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ horoscope })
                })
                if (response.ok) {
                  const blob = await response.blob()
                  const url = URL.createObjectURL(blob)
                  const a = document.createElement('a')
                  a.href = url
                  a.download = `horoscope-${horoscope.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf`
                  a.click()
                  URL.revokeObjectURL(url)
                  if (onGenerate) onGenerate(url)
                }
              } catch (error) {
                console.error('Failed to generate PDF:', error)
              } finally {
                setIsGenerating(false)
              }
            }
            return <Button onClick={generatePDF} disabled={isGenerating}><FileDown className="mr-2 h-4 w-4" />{isGenerating ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}{isGenerating ? 'Generating...' : 'Generate PDF'}</Button>
          }
          ENDFILE
          cat > components/delivery/whatsapp-share.tsx << 'ENDFILE'
          'use client'
          import { Button } from '@/components/ui/button'
          import { MessageCircle } from 'lucide-react'
          interface WhatsAppShareProps { text: string; title?: string }
          export function WhatsAppShare({ text, title }: WhatsAppShareProps) {
            const share = () => {
              const message = encodeURIComponent(`${title ? title + '\n\n' : ''}${text}`)
              window.open(`https://wa.me/?text=${message}`, '_blank')
            }
            return <Button variant="outline" onClick={share}><MessageCircle className="mr-2 h-4 w-4" />Share on WhatsApp</Button>
          }
          ENDFILE
          cat > components/delivery/email-share.tsx << 'ENDFILE'
          'use client'
          import { Button } from '@/components/ui/button'
          import { Mail } from 'lucide-react'
          interface EmailShareProps { subject: string; body: string }
          export function EmailShare({ subject, body }: EmailShareProps) {
            const share = () => {
              const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`
              window.location.href = mailtoLink
            }
            return <Button variant="outline" onClick={share}><Mail className="mr-2 h-4 w-4" />Share via Email</Button>
          }
          ENDFILE
          cat > components/delivery/download-button.tsx << 'ENDFILE'
          'use client'
          import { Button } from '@/components/ui/button'
          import { Download } from 'lucide-react'
          interface DownloadButtonProps { content: string; filename: string }
          export function DownloadButton({ content, filename }: DownloadButtonProps) {
            const download = () => {
              const blob = new Blob([content], { type: 'text/plain' })
              const url = URL.createObjectURL(blob)
              const a = document.createElement('a')
              a.href = url
              a.download = filename
              a.click()
              URL.revokeObjectURL(url)
            }
            return <Button variant="outline" onClick={download}><Download className="mr-2 h-4 w-4" />Download</Button>
          }
          ENDFILE
          cat > components/delivery/print-button.tsx << 'ENDFILE'
          'use client'
          import { Button } from '@/components/ui/button'
          import { Printer } from 'lucide-react'
          export function PrintButton() {
            return <Button variant="outline" onClick={() => window.print()}><Printer className="mr-2 h-4 w-4" />Print</Button>
          }
          ENDFILE
          cat > components/delivery/share-button.tsx << 'ENDFILE'
          'use client'
          import { Button } from '@/components/ui/button'
          import { Share2 } from 'lucide-react'
          import { toast } from 'sonner'
          interface ShareButtonProps { title: string; text: string; url?: string }
          export function ShareButton({ title, text, url }: ShareButtonProps) {
            const share = async () => {
              if (navigator.share) {
                try {
                  await navigator.share({ title, text, url: url || window.location.href })
                } catch (error) {
                  if ((error as Error).name !== 'AbortError') {
                    console.error('Error sharing:', error)
                  }
                }
              } else {
                navigator.clipboard.writeText(url || window.location.href)
                toast.success('Link copied to clipboard!')
              }
            }
            return <Button variant="outline" onClick={share}><Share2 className="mr-2 h-4 w-4" />Share</Button>
          }
          ENDFILE
      
      - name: Create PDF generation API route
        run: |
          cat > app/api/generate-pdf/route.ts << 'ENDFILE'
          import { NextRequest, NextResponse } from 'next/server'
          import jsPDF from 'jspdf'
          export async function POST(request: NextRequest) {
            try {
              const { horoscope } = await request.json()
              const doc = new jsPDF()
              let y = 20
              doc.setFontSize(20)
              doc.setFont('helvetica', 'bold')
              doc.text('Kundali Report', 105, y, { align: 'center' })
              y += 15
              doc.setFontSize(12)
              doc.setFont('helvetica', 'normal')
              if (horoscope.name) {
                doc.text(`Name: ${horoscope.name}`, 20, y)
                y += 10
              }
              if (horoscope.dateOfBirth) {
                doc.text(`Date of Birth: ${new Date(horoscope.dateOfBirth).toLocaleDateString()}`, 20, y)
                y += 10
              }
              if (horoscope.timeOfBirth) {
                doc.text(`Time of Birth: ${horoscope.timeOfBirth}`, 20, y)
                y += 10
              }
              if (horoscope.placeOfBirth) {
                doc.text(`Place of Birth: ${horoscope.placeOfBirth}`, 20, y)
                y += 15
              }
              doc.setFontSize(16)
              doc.setFont('helvetica', 'bold')
              doc.text('Astrological Insights', 20, y)
              y += 10
              doc.setFontSize(11)
              doc.setFont('helvetica', 'normal')
              if (horoscope.predictions) {
                horoscope.predictions.forEach((p: any, i: number) => {
                  if (y > 270) { doc.addPage(); y = 20 }
                  doc.setFont('helvetica', 'bold')
                  doc.text(`${i + 1}. ${p.title || 'Prediction'}`, 20, y)
                  y += 7
                  doc.setFont('helvetica', 'normal')
                  const text = p.text || p.description || 'No details'
                  doc.splitTextToSize(text, 170).forEach((line: string) => {
                    if (y > 270) { doc.addPage(); y = 20 }
                    doc.text(line, 25, y)
                    y += 6
                  })
                  y += 5
                })
              }
              const pages = doc.getNumberOfPages()
              for (let i = 1; i <= pages; i++) {
                doc.setPage(i)
                doc.setFontSize(8)
                doc.setTextColor(128, 128, 128)
                doc.text('Generated by AstroKalki - www.astrokalki.com', 105, 287, { align: 'center' })
                doc.text(`Page ${i} of ${pages}`, 105, 292, { align: 'center' })
              }
              const buffer = doc.output('arraybuffer')
              return new NextResponse(buffer, {
                headers: {
                  'Content-Type': 'application/pdf',
                  'Content-Disposition': `attachment; filename="horoscope-${horoscope.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf"`
                }
              })
            } catch (error) {
              console.error('PDF generation error:', error)
              return NextResponse.json({ error: 'Failed to generate PDF' }, { status: 500 })
            }
          }
          ENDFILE
      
      - name: Update package.json
        run: |
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.dependencies=p.dependencies||{};p.dependencies['jspdf']='^2.5.2';fs.writeFileSync('package.json',JSON.stringify(p,null,2));"
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build project
        run: pnpm build
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m 'feat: add delivery components with PDF generation API' || echo 'No changes to commit'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
