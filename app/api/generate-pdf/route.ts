import { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
  try {
    const { horoscope } = await req.json()
    if (!horoscope) return NextResponse.json({ error: 'Horoscope data required' }, { status: 400 })
    
    const { jsPDF } = await import('jspdf')
    const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' })
    
    doc.setFont('helvetica')
    doc.setFillColor(33, 128, 141)
    doc.rect(0, 0, 210, 40, 'F')
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(24)
    doc.text('AstroKalki', 105, 20, { align: 'center' })
    doc.setFontSize(14)
    doc.text('Horoscope Report', 105, 30, { align: 'center' })
    doc.setTextColor(0, 0, 0)
    
    let y = 55
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.text('Personal Details', 20, y)
    y += 10
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    
    const details = [
      `Name: ${horoscope.name || 'N/A'}`,
      `Birth Date: ${horoscope.birthDate ? new Date(horoscope.birthDate).toLocaleDateString('en-IN') : 'N/A'}`,
      `Birth Time: ${horoscope.birthTime || 'N/A'}`,
      `Birth Place: ${horoscope.birthPlace || 'N/A'}`
    ]
    details.forEach(d => { doc.text(d, 20, y); y += 7 })
    
    y += 10
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.text('Astrological Insights', 20, y)
    y += 10
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    
    if (horoscope.predictions) {
      horoscope.predictions.forEach((p: any, i: number) => {
        if (y > 270) { doc.addPage(); y = 20 }
        doc.setFont('helvetica', 'bold')
        doc.text(`${i + 1}. ${p.title || 'Prediction'}`, 20, y)
        y += 7
        doc.setFont('helvetica', 'normal')
        const text = p.text || p.description || 'No details'
        doc.splitTextToSize(text, 170).forEach((line: string) => {
          if (y > 270) { doc.addPage(); y = 20 }
          doc.text(line, 25, y)
          y += 6
        })
        y += 5
      })
    }
    
    const pages = doc.getNumberOfPages()
    for (let i = 1; i <= pages; i++) {
      doc.setPage(i)
      doc.setFontSize(8)
      doc.setTextColor(128, 128, 128)
      doc.text('Generated by AstroKalki - www.astrokalki.com', 105, 287, { align: 'center' })
      doc.text(`Page ${i} of ${pages}`, 105, 292, { align: 'center' })
    }
    
    const buffer = doc.output('arraybuffer')
    return new NextResponse(buffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="horoscope-${horoscope.name || 'report'}-${new Date().toISOString().split('T')[0]}.pdf"`
      }
    })
  } catch (error) {
    console.error('PDF error:', error)
    return NextResponse.json({ error: 'Failed to generate PDF' }, { status: 500 })
  }
}
